#!/bin/bash -e
if test -z "$COMPONENT_NAME" -o -z "$DOMAIN_NAME" -o -z "$NAMESPACE" -o -z "$HELM_CHART"; then
#  -o -z "$HELM_REPO"
    echo "COMPONENT_NAME, DOMAIN_NAME, NAMESPACE, HELM_CHART must be set"
fi

charts="$(mktemp -d)"
trap "rm -rf -- $charts" EXIT

yq="yq"
helm3="helm"
if which helm3 >/dev/null; then helm3=helm3; fi

kubectl="kubectl --context=$DOMAIN_NAME --namespace=$NAMESPACE"
helm="$helm3 --kube-context=$DOMAIN_NAME --namespace=$NAMESPACE"

export kubectl helm

echo "Resolving helm chart: $HELM_CHART"
if test -d "$HELM_CHART"; then
    chart_path="$HELM_CHART"
    echo "* From directory: $chart_path"
elif test -d "charts/$HELM_CHART"; then
    chart_path="charts/$HELM_CHART"
    echo "* From directory: $chart_path"
elif test -f "$HELM_CHART"; then
    echo "* From tarball: $HELM_CHART"
    tar xzf "$HELM_CHART" -C "$charts"
    dir=$(tar tf "$HELM_CHART" | grep Chart.yaml | head -n1 | cut -d "/" -f1)
    chart_path="$charts/$dir"
elif test -f "charts/$HELM_CHART"; then
    echo "* From tarball: $HELM_CHART"
    tar xzf "charts/$HELM_CHART" -C "$charts"
    dir=$(tar tf "charts/$HELM_CHART" | grep Chart.yaml | head -n1 | cut -d "/" -f1)
    chart_path="$charts/$dir"
elif test -d "charts"; then
    echo "* From metadata: $HELM_CHART $HELM_CHART_VERSION"
    for file in charts/*.tgz; do
        if test ! -f "$file"; then continue; fi;
        echo "  chart: $file"
        _name=$(helm show chart "$file" | yq e -M '.name' -)
        _ver=$(helm show chart "$file" | yq e -M '.version' -)
        echo "  chart: $_name version: $_ver"
        if test "$_name" = "$HELM_CHART"; then
            if test -z "$HELM_CHART_VERSION" -o "$HELM_CHART_VERSION" = "$_ver"; then
                echo "  resolved to: $file"
                if test -d "$file"; then
                    chart_path="$file"
                elif test -f "$file"; then
                    tar xzf "$file" -C "$charts"
                    dir=$(tar tf "$file" | grep Chart.yaml | head -n1 | cut -d "/" -f1)
                    chart_path="$charts/$dir"
                    break
                fi
            fi
        fi
    done
elif test -n "$HELM_REPO"; then
    if test -d .charts; then
        charts=.charts
    fi
    echo "Fetching chart repository: $HELM_REPO"
    $helm repo add stable "https://charts.helm.sh/stable"
    $helm repo add "$COMPONENT_NAME" "$HELM_REPO"
    $helm repo update
    if test -n "$HELM_CHART_VERSION"; then
        HELM_ARGS="$HELM_ARGS --version $HELM_CHART_VERSION"
    fi
    chart_path=$charts/$(basename "$HELM_CHART")
    rm -rf "$chart_path"
    # shellcheck disable=SC2086
    $helm fetch "$COMPONENT_NAME/$HELM_CHART" $HELM_ARGS --destination $charts --untar
else
    echo "Cannot find helm chart $HELM_CHART"
    exit 1
fi

# TODO no HELM_HOME in Helm 3
# https://helm.sh/docs/faq/#xdg-base-directory-support
# Helm stores cache, configuration, and data based on the following configuration order:
# - If a HELM_*_HOME environment variable is set, it will be used
# - Otherwise, on systems supporting the XDG base directory specification, the XDG variables will be used
# - When no other location is set a default location will be used based on the operating system
#export HELM_HOME=$(pwd)/.helm


echo "Checking namespace: $NAMESPACE"
if ! $kubectl get namespace "$NAMESPACE" -o name > /dev/null;  then
  $kubectl create namespace "$NAMESPACE"
fi

if test -x pre-deploy; then
    echo "Running pre-deploy..."
    pre_deploy=$(./pre-deploy)
    helmvars=$(grep -E '^export ' <<<"$pre_deploy" || exit 0)
    if test -n "$helmvars"; then eval "$helmvars"; fi
fi

if test -d "crds"; then
    echo "Resolving CRDs"
    for file in crds/*.yaml crds/*.yml; do
        if test ! -f "$file"; then continue; fi
        echo "* Reading: $file"
        max_di=$($yq e 'di' "$file" | tail -1)
        for i in $(seq 0 "$max_di"); do
            crd=$($yq e "select(di == $i).metadata.name" "$file")
            if test -z "$crd" -o "$crd" = "null"; then
                continue
            fi
            if $kubectl get crd "$crd" > /dev/null; then
                echo "  $crd already exists"
            else
                $kubectl create -f "$file"
            fi
        done
    done
fi

if $helm list --failed --pending -q | grep -E "^$COMPONENT_NAME\$"; then
    echo "Uninstalling chart: $COMPONENE_NAME"
    set -x
    $helm uninstall "$COMPONENT_NAME"
    set +x
fi

echo "Resolving helm chart values:"
if test -n "$CHART_VALUES_FILE"; then
    for file in $CHART_VALUES_FILE; do
        if test -f "$chart_path/$file"; then
            echo "* HELM_CHART/$file"
            HELM_ARGS="$HELM_ARGS --values $chart_path/$file"
        fi
    done
fi
for file in values.yaml values-*.yaml values.yml values-*.yml $EXTRA_VALUES_FILE; do
    if test ! -f "$file"; then continue; fi
    echo "* $file"
    HELM_ARGS="$HELM_ARGS --values $file";
done
echo "Installing helm chart: $COMPONENT_NAME"
set -x
# shellcheck disable=SC2086
$helm upgrade "$COMPONENT_NAME" "$chart_path" \
    $HELM_ARGS \
    $HELM_OPTS \
    --install \
    --create-namespace \
    --wait
set +x

if test -x post-deploy; then
    echo "Running post-deploy..."
    ./post-deploy
fi
