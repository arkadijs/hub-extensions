#!/bin/bash -e
# shellcheck disable=SC2086
usage() {
  cat << EOF
.env file parser written in bash

Parameters:
  --default VALUE         Default value if applicable (can repeat multiple times)
  -f --file PATH          Path to .env file (can repeat multiple times)
  --verbose               Verbose output for debugging

Subcommands:
  $(basename "$0") set KEY -f FILE       returns all keys in dotenv file
  $(basename "$0") get KEY -f FILE       returns value associated with KEY or empty string
  $(basename "$0") keys -f FILE          returns all keys in dotenv file
  $(basename "$0") merge (-f FILE1)...   merges two or .env files
  $(basename "$0") export                exports dotenv file for bash
EOF
}

TEMP_FILES=""
trap 'rm -f $TEMP_FILES' EXIT

FILES=
ACTION=
VERBOSE=${VERBOSE:-false}
DEFAULTS=
while [ "$1" != "" ]; do
  case "$1" in
    get )
      ACTION="$1"
      shift
      KEY="$1"
    ;;
    merge | export | keys )
      ACTION="$1" ;;
    set )
      ACTION="$1"
      shift
      ARG="$1"
    ;;
    -f | --file )
      shift
      FILES=$(echo "$FILES" "$1" | xargs)
      ;;
    --default )
      shift
      DEFAULTS=$(echo "$DEFAULT" "$1" | xargs)
      ;;
    -h | --help )
      usage
      exit
      ;;
    --verbose )
      VERBOSE="true"
      ;;
    * )
      usage
      exit 1
      ;;
  esac
  shift
done

if test "$VERBOSE" = "true"; then
  set -x
fi

if test -z "$FILES"; then
  if test -f ".env"; then
    FILES=".env"
  else
    cat <<EOF

Error: cannot find .env file

EOF
    usage
    exit 1
  fi
fi

dotenv::merge() {
  local result
  result=$(mktemp)
  TEMP_FILES="$TEMP_FILES $result"
  for f in "$@"; do
    test -f "$f" || continue
    __merge "$result" "$f"
  done
  cat $result
}

__merge() {
  local key value
  (cat "$2" && echo ) | while read -r line; do
    # TODO: eliminate bashism
    line=${line#"${line%%[![:space:]]*}"}  # trim leading whitespace
		line=${line%"${line##*[![:space:]]}"}  # trim trailing whitespace
    # special case for comments
		if [[ ! "$line" || "$line" == '#'* ]]; then
      if test -z "$(grep "$line" "$1")"; then
        echo $line >> $1
      fi
      continue
    fi
    if [[ "$line" =~ ^(export[ ]+)?(.*)=(.*)$ ]]; then
      key="${BASH_REMATCH[2]}"
      curr_line=$(grep --color=never -e "^$key=" "$1" || true)
      if test -z "$curr_line"; then
        echo $line >> $1
      elif test "$curr_line" != "$line"; then
        local delim=$'\001'
        sed -i -e "s${delim}${curr_line}${delim}${line}${delim}" "$1"
      fi
    fi
  done
}

dotenv::get() {
  test -f "$2" || return
  [[ $(cat $2) =~ ^(.*(^|$'\n'))((export)?[ ]*)"$1="(.*)\"*$ ]] && \
  result=${BASH_REMATCH[5]%%$'\n'*} && result=${result%"${result##*[![:space:]]}"}
  echo "$result" | sed -e "s/^\"//" -e "s/\"$//"
}

dotenv::set() {
  local temp temp2
  temp=$(mktemp) || exit 1
  temp2=$(mktemp) || exit 1
  # shellcheck disable=SC2064
  TEMP_FILES="$TEMP_FILES $temp $temp2"
  echo "$@" > "$temp"
  dotenv::merge "$FIRST_FILE" "$temp" > $temp2
  cat $temp2 > $FIRST_FILE
}

dotenv::export() {
  test -f "$1" || return
  local key value line
  (cat "$1" && echo ) | while read -r line; do
    # TODO: eliminate bashism
    line=${line#"${line%%[![:space:]]*}"}  # trim leading whitespace
    line=${line%"${line##*[![:space:]]}"}  # trim trailing whitespace
    # special case for comments
    if [[ ! "$line" || "$line" == '#'* ]]; then
      continue
    fi
    if [[ "$line" =~ ^(export[ ]+)?(.+)=(.*)$ ]]; then
      key="${BASH_REMATCH[2]}"
      value="${BASH_REMATCH[3]}"
      echo "export $key=$value"
    fi
  done
}

dotenv::keys() {
  test -f "$1" || return
  local key
  (cat "$1" && echo ) | while read -r line; do
    # TODO: eliminate bashism
    line=${line#"${line%%[![:space:]]*}"}  # trim leading whitespace
    line=${line%"${line##*[![:space:]]}"}  # trim trailing whitespace
    # special case for comments
    if [[ ! "$line" || "$line" == '#'* ]]; then
      continue
    fi
    if [[ "$line" =~ ^(export[ ]+)?(.*)=\"?(.*)\"?$ ]]; then
      echo "${BASH_REMATCH[2]}"
    fi
  done
}

FIRST_FILE=$(echo "$FILES" | awk '{print $1;}')
case $ACTION  in
  "merge" )
    dotenv::$ACTION $FILES
  ;;
  "export" | "keys" )
    dotenv::$ACTION $FIRST_FILE ;;
  "get"    )
    echo "$(dotenv::$ACTION $KEY $FIRST_FILE) $DEFAULTS" | awk '{print $1;}'
  ;;
  "set" )
    dotenv::$ACTION $ARG;;
  * )
    usage
    exit 1
esac
