#!/bin/bash -e
# Copyright (c) 2022 EPAM Systems, Inc.
# 
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.


usage() {
  cat << EOF
commonly used operations with files

Parameters:
  -e --error --fail       Fail with error code instead (otherwise returns empty string)
  --verbose               Verbose output for debugging
  --help                  Print this message

Subcommands:
  $(basename "$0") find-in-path FILE             Returns file locatin in PATH (also can use subdirs)
  $(basename "$0") abspath      FILE             Returns returns absolute location for desired file
  $(basename "$0") download     URL  DEST        Downloads a remote file
  $(basename "$0") copy         FILE DEST        Copy file utility
  $(basename "$0") download-tar URL  EXTRACT_TO  Downlaods and extracts tarball file

Parameters for download-tar:
  --tar-subpath PATH_INSIDE_TARBALL              Instructs to extract only specific subpath
EOF
}

err=false
op=""
arg=""
while test -n "$1"; do
  case $1 in
    -h | --help )
        usage
        exit ;;
    -e | --fail | --error )
        err=true
        continue
        ;;
    -V | --verbose )
        set -x
        continue
    ;;
    find-in-path | abspath )
        op="$1"
        shift
        arg="$1"
        shift
        continue
    ;;
    download | copy )
        op="$1"
        shift
        arg="$1"
        shift
        arg2="$1"
        shift
        continue
    ;;

    download-tarball | download-tar )
      op="download-tarball"
      shift
      arg="$1"
      shift
      arg2="$1"
    ;;
    --tar-subpath )
      tar_subpath="$2"
      shift
    ;;
    * )
      color e "Error: unknown flag $1"
      usage
      exit 1
      ;;
  esac
  shift
done

abspath() {
  local name dir
  if test -d "$1"; then
    (cd "$1" && pwd)
  elif test -f "$1"; then
    # shellcheck disable=SC2086,SC2046
    echo "$(cd $(dirname $1) && pwd)/$(basename $1)"
  else
    name="$(basename "$1")"
    dir="$(dirname "$1")"
    if test -n "dir"; then
      echo "$(abspath "$dir")/$name"
    fi
  fi
}

find_in_path() {
  local _file _path rv
  _file="$(echo "$1" | sed -e 's/^\///')"
  ( IFS=:
    for _path in $PATH; do
      if test -x "$_path/$_file"; then
        rv="$_path/$_file"
        break;
      fi
    done
    if test -z "$rv"; then
      if $err; then
        >&2 echo "Error: command not found: $1"
        exit 44
      fi
    else
      abspath "$rv"
    fi
  )
}

download_file() {
  local temp http_code
  http_code=$(
    curl -sLo "$2" -w "%{http_code}" "$1"
  )
  if test "$(echo "$http_code" | cut -c1-1)" != "2"; then
    >&2 color e "Error downloading url: $http_code"
    cat "$temp"
    # shellcheck disable=SC2086
    return $http_code
  fi
  if test ! -s "$2"; then
    >&2 color e "Error: have got empty file (url: $temp)"
    return 1
  fi
}

case "$op"  in
  "find-in-path" )
    PATH=".hub:.hub/bin:$PATH"
    find_in_path "$arg"
  ;;
  "abspath" )
    PATH=".hub:.hub/bin:$PATH"
    abspath "$arg"
  ;;

  "download" )
    temp="$(mktemp)"
    trap 'rm -f $temp' EXIT
    download_file "$arg" "$temp"
    files copy "$temp" "$arg2"
  ;;

  "download-tarball" )
    temp="$(mktemp)"
    trap 'rm -f $temp' EXIT
    echo -n "Downloading $arg... "
    download_file "$arg" "$temp"
    if test -n "$tar_subpath"; then
      echo " extracting $tar_subpath "
      ROOT=$(tar -tvf "$temp" | awk 'NR==1{print substr($NF, 1, length($NF)-1)}')
      STRIP=$(echo "$ROOT/$tar_subpath" | tr / " " | wc -w)
      rm -rf "$arg2"
      mkdir -p "$arg2"
      tar -xf "$temp" --strip-components "$STRIP" -C "$arg2" "$ROOT/$tar_subpath"
    else
      color e "Error: download-tar without subpath is not implemented yet!"
      exit 1
    fi

    # files copy "$temp" "$arg2"
  ;;

  "copy" )
    copy "$arg" "$arg2"
  ;;
  * )
    usage
    exit 1
esac
