#!/bin/bash -e
# Copyright (c) 2022 EPAM Systems, Inc.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# shellcheck disable=SC2086

usage() {
  cat << EOF
Reads parameters from one or multiple hubfiles

$(basename "$0") <subcommand> PARAM_NAME -f HUB_FILE

Subcommands:
  json   PARAM_NAME       Returns json string of the parameter
  value  PARAM_NAME       Returns only value of the parameter
  envvar ENVVAR           Returns parameter by envvar
  env    ENVVAR           Same as envvar
  flatten                 Returns flattended parameters
  listenv                 Returns list of environment variables

Flags:
  -f --file               Path to hubfile (can repeat, default HUB_FILES envvar)
  -d --dotenv             Path to the dotenv file (can repeat, default DOT_ENV envvar)
  -V --verbose            For debug purpose
  -h --help               Show this message

EOF
}


subcommand=""
hub_files=""
dot_env=""
COMMAND_ARG=""
while test -n "$1"; do
  ARG="$1"; shift
  case $ARG in
    value | json | envvar | env)
      subcommand="$ARG"
      continue
      ;;
    flat | flatten | listenv)
      subcommand="$ARG"
      continue
      ;;
    -V | --verbose )
      VERBOSE=true
      continue
      ;;
    -f | --file )
      unset HUB_FILES
      hub_files="$hub_files $1"
      shift
      continue
      ;;
    -d | --dotenv )
      if test -f "$1"; then
        unset DOT_ENV
        dot_env="$DOT_ENV $1"
      fi
      shift
      continue
      ;;
    -h | --help )
      usage
      exit
      ;;
    * )
      COMMAND_ARG="$ARG"
      continue;
      ;;
  esac
done

with_params() {
  # shellcheck disable=SC2048
  for f in $*; do
    if test -n "$(yq e 'select(.parameters)' $f)"; then
      echo -n " $f"
    fi
  done
}

if test "$VERBOSE" = "true"; then
  set -x
fi

# shellcheck disable=SC2155
export DOT_ENV="$(echo "$DOT_ENV $dot_env" | xargs)"

HUB_FILES="$(echo "$HUB_FILES $hub_files" | xargs)"
if test -z "$HUB_FILES"; then
  HUB_FILES="$(dotenv get HUB_FILES)"
fi

HUB_FILES="$(with_params $HUB_FILES)"

if test -z "$subcommand" -o -z "$HUB_FILES"; then
  color e "Error: cannot find .env file"
  usage
  exit 1
fi

getParamNameByEnvVar() {
  local f result
  for f in $HUB_FILES; do
    test -f $f || continue;
    result=$(
      yq e -o=json "$f" | jq "[.parameters]"
    )
    if test -n "$result"; then
      echo "$result"
      break
    fi
  done
}

json() {
  # shellcheck disable=SC2048
  yq eval-all -o=json 'select(.parameters)' $*
}

flatten() {
  jq -cMr " \
    .parameters \
    | walk(if type==\"object\" and .parameters? then .name as \$pref | .parameters[] | select(.name == .name) | del(.name) + {name: (\$pref+\".\"+.name)} else . end) \
    | walk(if type==\"object\" and .name then {(.name): . | del(.name)} else . end) \
  "
}

withName() {
  jq -cMr ".[] | select(.\"$1\") | .\"$1\""
}

readField() {
  jq -cMr --arg field "$1" '. | select(.[$field]) | .[$field]'
}

first() {
  jq -s '.|first|select(.)'
}

getParamValue() {
  local value envval envname default
  result="$(json $HUB_FILES | flatten | withName "$1" | first)"
  if test -n "$result"; then
    value="$(echo "$result" | readField "value")"
    if test -n "$value"; then
      echo "$value"
    else
      envname="$(echo "$result" | readField "fromEnv")"
      if test -n "$envname"; then
        envval="$(dotenv get "$envname")"
        if test -z "$envval"; then
          envval="$(eval "echo \$$envname")"
        fi
      fi
      if test -n "$envval"; then
        echo "$envval"
      else
        default="$(echo "$result" | readField "default")"
        if test -n "$default"; then
          echo "$default"
        fi
      fi
    fi
  fi
}

getParamJson() {
  json $HUB_FILES | flatten | withName "$1" | jq -cMr --arg n "$1" '. + {name: $n}'
}

getFlatParams() {
  json $HUB_FILES | flatten | jq -cMr '[.[] | to_entries[] | {name: .key} + .value]'
}

getParamByEnvvar() {
  getFlatParams | jq -s add | jq -cMr --arg var "$1" '[.[] | select(.fromEnv == $var) | .][0] | select(.)'
}

listEnvvars() {
  getFlatParams | jq -s add | jq -cMr '[.[].fromEnv? | select(.)] | sort | .[]'
}

case $subcommand in
  value)
    getParamValue "$COMMAND_ARG"
  ;;
  json)
    getParamJson "$COMMAND_ARG"
  ;;
  envvar | env)
    getParamByEnvvar "$COMMAND_ARG"
  ;;
  flat | flatten)
    getFlatParams
  ;;
  listenv)
    listEnvvars
  ;;
esac
