#!/bin/bash -e

usage() {
  cat << EOF
Reads parameterÑ‹ value from one or multiple hubfiles

$(basename $0) <subcommand> ARG -f HUB_FILE

Subcommands:
  json   PARAM            Returns json string of the parameter
  value  PARAM            Returns only value of the parameter
  envvar ENVVAR           Returns param name by envvar
  flat                    Returns flattended parameters
  listenv                 Returns list of environment variables

Parameters:
  -f --file               Path to hubfile (this parameter can repeat, default HUB_FILES envvar)
  -V --verbose            For debug purpose
  -h --help               Show this message

EOF
}


subcommand=""
hub_files=""
COMMAND_ARG=""
while test -n "$1"; do
  ARG="$1"; shift
  case $ARG in
    value | json | envvar)
      subcommand="$ARG"
      COMMAND_ARG="$1"
      shift
      continue
      ;;
    flat | listenv)
      subcommand="$ARG"
      continue
      ;;
    -V | --verbose )
      VERBOSE=true
      continue
      ;;
    -f | --file )
      unset HUB_FILES
      hub_files="$hub_files $1"
      shift
      continue
      ;;
    -h | --help )
      usage
      exit
      ;;

    * )
      usage
      exit 1
      ;;
  esac
done

if test "$VERBOSE" = "true"; then
  set -x
fi

HUB_FILES="$(echo $HUB_FILES $hub_files | xargs)"
if test -z "$HUB_FILES" -o -z "$subcommand"; then
  usage
  exit 1
fi

getParamNameByEnvVar() {
  local f result
  for f in $HUB_FILES; do
    test -f $f || continue;
    result=$(
      yq e -o=json "$f" | jq "[.parameters]"
    )
    if test -n "$result"; then
      echo "$result"
      break
    fi
  done
}

toJson() {
  cat "$1" | yq e -o=json
}

flattened() {
  jq -cMr " \
    .parameters \
    | walk(if type==\"object\" and .parameters? then .name as \$pref | .parameters[] | select(.name == .name) | del(.name) + {name: (\$pref+\".\"+.name)} else . end) \
    | walk(if type==\"object\" and .name then {(.name): . | del(.name)} else . end) \
  "
}

withName() {
  jq -cMr ".[] | select(.\"$1\") | .\"$1\""
}

readField() {
  jq -cMr --arg field "$1" '. | select(.[$field]) | .[$field]'
}

getParamValue() {
  local hubfile value envvar env default
  for hubfile in $HUB_FILES; do
    result="$(toJson "$hubfile" | flattened | withName "$1")"
    if test -n "$result"; then
      value="$(echo "$result" | readField "value")"
      if test -z "$value"; then
        env="$(echo "$result" | readField "fromEnv")"
        if test -z "$env"; then
          envvar="$(printenv "$env")"
        fi
        if test -z "$envvar"; then
          default="$(echo "$result" | readField "default")"
          if test -n "$default"; then
            echo "$default"
          fi
        else
          echo "$envvar"
        fi
      else
        echo "$value"
      fi
      break
    fi
  done
}

getParamJson() {
  for hubfile in $HUB_FILES; do
    result="$(toJson "$hubfile" | flattened | withName "$1")"
    if test -n "$result"; then
      echo "$result"
      break
    fi
  done
}

getFlatParams() {
  for hubfile in $HUB_FILES; do
    toJson "$hubfile" | flattened | jq -cMr '[.[] | to_entries[] | {name: .key} + .value]'
  done
}

getParamByEnvvar() {
  getFlatParams | jq -s add | jq -cMr --arg var "$1" '.[] | select(.fromEnv == $var)'
}

listEnvvars() {
  getFlatParams | jq -s add | jq -cMr '[.[].fromEnv? | select(.)] | sort | .[]'
}

case $subcommand in
  value)
    getParamValue "$COMMAND_ARG"
  ;;
  json)
    getParamJson "$COMMAND_ARG"
  ;;
  envvar)
    getParamByEnvvar "$COMMAND_ARG"
  ;;
  flat)
    getFlatParams
  ;;
  listenv)
    listEnvvars
  ;;
esac
