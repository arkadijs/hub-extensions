#!/bin/bash -e
# Copyright (c) 2022 EPAM Systems, Inc.
# 
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.


usage() {
cat << EOF
Wrapper script around vault. With only difference it uses a port-forward

Usage: 
  $(basename "$0") [args] [vault sub-command] [vault args]

Current kubecontext:
  $(basename "$0") [no arg] or [-c _] or [--current-kubecontext]

Parameters:
  -n --namespace         Vault namespace
  -k --kubeconfig        Path to the kubeconfig. If not specified then use default to kubectl
  -c --kubecontext       Name of Kubernetes context in Kubeconfig file
                         "_" are the shorthands for "current context"
  --current-kubecontext  Use current kubecontext existing
  -S --service           Reference to vault service
  -s --silent            Silent
  -V --verbose           Add some verbosity to output
  -h --help              Print this message

Example: 
  $(basename "$0") [-c _] status
  $(basename "$0") [-c _] -S svc/vault list

Sub-command $(basename "$0"):
EOF
  vault $VAULT_ARGS --help
}

context="_"
namespace="vault"
VAULT_SVC="svc/vault"
SILENT=${SILENT:-false}
VAULT_ARGS=

# shellcheck disable=SC1091
test ! -f ".env" || source ".env"

while [ "$1" != "" ]; do
  case "$1" in
    -n | --namespace )      shift
                            namespace="$1"
                            ;; 
    -k | --kubeconfig )     shift
                            export KUBECONFIG="$1"
                            ;; 
    -c | --kubecontext )    shift
                            context="$1"
                            ;;
    --current-kubecontext ) context="_"
                            ;;
    -S | --service )        shift
                            VAULT_SVC="$1"
                            ;;
    -s | --silent )         SILENT=true
                            ;;
    -h | --help )           usage
                            exit 0
                            ;;
    -V | --verbose )        set -x
                            ;;
    * )                     VAULT_ARGS="$VAULT_ARGS $1"
                            ;;
  esac
  shift
done

if test "$context" == "_"; then
  context="$(kubectl config current-context)"
fi

$SILENT || cat << EOF 
Proceeding to initialize: $VAULT_SVC
* Using context: $context
* Using namespace: $namespace
EOF

VAULT_LOCAL_PORT=$(awk 'BEGIN{srand();print int(rand()*(63000-2000))+2000 }')
VAULT_ADDR="http://127.0.0.1:$VAULT_LOCAL_PORT"
export VAULT_ADDR

KUBECTL=${KUBECTL:-kubectl --context="$context" --namespace="$namespace"}

$SILENT || echo -n "* Using service: $VAULT_SVC"
set +e
SERVICE_PAYLOAD=$($KUBECTL get -o json $VAULT_SVC)
if test "$?" != "0"; then
  $SILENT || echo " Error: cannot find service $COMPONENT_NAME"
  exit 2
fi
set -e

VAULT_PORT=$(echo $SERVICE_PAYLOAD \
             | jq -r '.spec.ports[] | select(.name=="http").port | if . == "" then 8200 else . end' \
            )

connect() {
  trap 'kill $(jobs -p) || exit 0' EXIT
  $SILENT || echo -n "* Starting port forwarding to $1: "
  success=false
  kfctl_pid=0
  for _ in $(seq 30); do
    $SILENT || echo -n "."
    if ! ps -p $kfctl_pid > /dev/null; then
      $KUBECTL port-forward "$VAULT_SVC" "$1:$VAULT_PORT" >/dev/null 2>&1 &
      kfctl_pid=$!
      sleep 2
      continue
    fi

    if curl -sLko /dev/null "$VAULT_ADDR/v1/sys/health"; then
      success=true
      break
    fi
    sleep 5
  done

  if ! $success; then
    $SILENT || echo " Error"
    $SILENT || echo "Timed out trying to establish port forwarding to vault"
    exit 1
  fi
  $SILENT || echo " Done"
}

$SILENT || echo ":$VAULT_PORT"
connect "$VAULT_LOCAL_PORT"
if ! $SILENT; then
  echo -n "* Checking vault at $VAULT_ADDR: "
  # see: https://www.vafultproject.io/api-docs/system/health#read-health-information
  code=$(curl -sLko /dev/null -w "%{http_code}" "$VAULT_ADDR/v1/sys/health")
  case "$code" in
    "200" ) STATUS="Running" ;;
    "429" ) STATUS="Unsealed" ;;
    "472" ) STATUS="Disaster recovery" ;;
    "473" ) STATUS="Standby" ;;
    "501" ) STATUS="Not initialized" ;;
    "503" ) STATUS="Not initialized" ;;
    "000" ) STATUS="No HTTP response" ;;
    * )     STATUS="Status code $code" ;;
  esac
  echo "$STATUS"
  echo "* Running: vault $VAULT_ARGS"
fi
# shellcheck disable=SC2086
vault $VAULT_ARGS
