#!/bin/bash -e
# shellcheck disable=SC2046,SC2068,SC2064,SC2086

HUB_HOME="${HUB_HOME:-$(dirname "$0")}"
HUB_WORKDIR="${HUB_WORKDIR:-$(pwd)}"
PATH="$HUB_HOME:$HUB_HOME/bin:$HUB_WORKDIR:$HUB_WORKDIR/bin:$PATH"
HUB_EXTENSION="$(basename "$0" | sed 's/-/ /g')"

# HUB_STACK_REQUIRES="components"

export HUB_HOME PATH HUB_HOME HUB_WORKDIR

find_in_path() {
  local _file _path rv
  _file="$(echo "$1" | sed -e 's/^\///')"
  ( IFS=:
    for _path in $PATH; do
      if test -x "$_path/$_file"; then
        rv="$_path/$_file"
        echo "$rv"
        break;
      fi
    done
    if test -z "$rv"; then
      >&2 echo "Error: command not found: $1"
      exit 404
    fi
  )
}


toJson() {
  cat "$1" | yq e -o=json
}

usage() {
  cat << EOF
Initializes a brand new stack from existing hub file

Usage:
  $HUB_EXTENSION -f <path-or-url-hub.yaml>

EOF

  if test -n "$@"; then
    for req in $@; do
      local init
      init=$(find_in_path "$req/init")
      if test -n "$init"; then
        $init --help
      fi
    done
  fi

cat <<EOF
Common parameters:
  -f  --file                  Path to stack definition file (can be repeated multiple times)
      --force                 Force to overwrite .env file
  -V  --verbose               Verbose outputs for debug purposes
  -h  --help                  Print this message
EOF
}

finalize() {
  local rv="$?"
  rm -rf $@
  if test "$rv" != "0"; then
    echo "Finished wih error!"
  fi
  exit $rv
}

VERBOSE=false
SILENT=false
HELP=false
ARGS=$*
HUB_FILES=""


while [ "$1" != "" ]; do
  case $1 in
    -f | --file )
      shift
      HUB_FILES=$(echo "$HUB_FILES $1" | xargs)
      ;;
    --force )
      HUB_USE_FORCE="1"
      ;;
    --profile )
      shift
      HUB_DEPLOY_PROFILE="$1"
      ;;
    -V | --verbose )
      VERBOSE=true
      ;;
    -h | --help )
      HELP=true
      ARGS="--help"
      ;;
  esac
  shift
done

if $VERBOSE; then
  set -x
fi

if test -z "$HUB_FILES" -a -f "hub.yaml"; then
  HUB_FILES="hub.yaml"
fi

for hubfile in $HUB_FILES; do
  if test ! -f "$hubfile"; then
    continue
  fi
  HUB_STACK_REQUIRES="$HUB_STACK_REQUIRES $(toJson $hubfile | jq -Mr 'select(.requires).requires[]' -)"
done

if $HELP; then
  usage $HUB_STACK_REQUIRES
  exit 0
fi

if test -f "$HUB_WORKDIR/.env" -a -z "$HUB_USE_FORCE"; then
  cat << EOF

Error: Stack has been already initialized
Reason: .env file already exists

If this is your intention: try to run the same command with --force flag

EOF
    exit 1
fi

if test -z "$HUB_FILES"; then
  cat << EOF

Error: cannot find hub definition files

Example:
  $HUB_EXTENSION -f hub.yaml

EOF
  exit 1
fi

TEMP_DIR=$(mktemp -d || exit 2)
mkdir -p "$TEMP_DIR"
trap 'finalize $TEMP_DIR' EXIT

temp_file() {
  echo "$TEMP_DIR/$(cat /dev/urandom | head -c 32 | base64 | tr -dc 'a-z')"
}

download_file() {
  local temp http_code
  echo "  Downloading $(basename $2) from: $1"
  temp="$TEMP_DIR/$(basename $2)"
  http_code=$(
    curl -sLo "$temp" -w "%{http_code}" "$1"
  )
  if test "$(echo $http_code | cut -c1-1)" != "2"; then
    echo "Error downloading url: $http_code"
    cat "$temp"
    return $http_code
  fi
  if test ! -s "$temp"; then
    echo "Error: have got empty file (url: $temp)"
    return 1
  fi
  echo -n "  Saving to $(pwd): "
  copy "$temp" "$2"
  rm -f "$temp"
}

KNOWN_URLS=""
EXPANDED=""

expand_hub_files() {
  local f included local_file
  for f in $@; do
    if grep -q "$f" <<< "$EXPANDED"; then
      continue
    fi
    if test -f "$f"; then
      EXPANDED=$(echo "$EXPANDED $f" | xargs)
      echo "* Checking $f"
      included="$(cat "$f" | yq e '.extensions.include.[]' -)"
      if test -n "$included"; then
        expand_hub_files $included
      fi
      continue
    fi
    # is url
    if echo "$f" | grep -e '^https\?://' >/dev/null 2>&1; then
      local_file="$HUB_WORKDIR/$(basename "$f")"
      if test ! -f "$local_file"; then
        download_file "$f" "$local_file"
        KNOWN_URLS=$(dirname $f | xargs)
      fi
      expand_hub_files "$local_file"
      continue
    fi

    for url in $KNOWN_URLS; do
      # shellcheck disable=SC2001
      if download_file "$url/$1" "$HUB_WORKDIR/$1"; then
        expand_hub_files "$HUB_WORKDIR/$1"
        break
      fi
    done

    if test ! -f "$f"; then
      echo "Error: $f not found!"
      exit 1
    fi
  done
}

update_symlink() {
  if test -L "$2"; then
    if test $(readlink -n "$2") != "$1"; then
      unlink "$2"
    fi
  fi
  if test ! -f "$2"; then
    echo "* Updating symlink: .env"
    ln -sf "$1" "$2"
  fi
}

componentDir() {
  jq -cMr --arg 'comp' "$1" '.[] | select(.name==$comp).source?.dir | select(.)'
}

componentSourceRepo() {
  jq -cMr --arg 'src' "$1" --arg 'comp' "$2" '.[] | select(.name==$comp).source?[$src]?.repo | select(.)'
}

componentSourceSubdir() {
  jq -cMr --arg 'src' "$1" --arg 'comp' "$2" '.[] | select(.name==$comp).source?[$src]?.subDir | select(.)'
}

componentSourceRef() {
  jq -cMr --arg 'src' "$1" --arg 'comp' "$2" '.[] | select(.name==$comp).source?[$src]?.ref | [select(.)]+["master"] | [ .[] | select(.!= "")][0]'
}

echo "Initializing a new stack"
if test ! -L "$HUB_WORKDIR/.env"; then
  if test -f "$HUB_WORKDIR/.env" ; then
    "* Removing .env"
    rm -rf "$HUB_WORKDIR/.env"
  fi
fi

expand_hub_files $HUB_FILES
HUB_FILES="$EXPANDED"

export HUB_FILES

mkdir -p "$HUB_WORKDIR/.hub/env"
DOTENV_FILE="$HUB_WORKDIR/.hub/env/.env"

if test -n "$HUB_USE_FORCE"; then
  rm -rf "$DOTENV_FILE"
fi

temp1="$(temp_file)"
dotenv -f "$temp1" set "HUB_FILES=\"$HUB_FILES\""

temp2="$(temp_file)"
dotenv merge -f "$DOTENV_FILE" -f "$temp1"  > "$temp2"
copy "$temp2" "$DOTENV_FILE"
update_symlink "$DOTENV_FILE" "$HUB_WORKDIR/.env"

for req in $HUB_STACK_REQUIRES; do
  init=$(find_in_path "$req/init")
  echo "* Running $req init"
  $init $ARGS
done

for hubfile in $HUB_FILES; do
  if test ! -f $hubfile; then
    echo "* Waring: skipping $hubfile due to not found"
    continue
  fi
  components="$(toJson "$hubfile" | jq -cMr '.components' -)"
  for comp in $(echo "$components" | jq -cMr '.[].name'); do
    echo "* Checking component: $comp"
    comp_dir=$(echo $components | componentDir "$comp")
    if test -d "$comp_dir"; then
      continue
    fi

    git_repo=$(echo $components | componentSourceRepo "git" "$comp")
    if test -n "$git_repo"; then
      subdir=$(echo $components | componentSourceSubdir "git" "$comp")
      ref=$(echo $components | componentSourceRef "git" "$comp")
      temp_dir=$(temp_file)
      echo "  Retrieving from git source repository"
      echo "  Running: git clone $git_repo"
      git clone --depth 1 "$git_repo" "$temp_dir" > /dev/null
      (cd "$temp_dir"; if test "$(git rev-parse --abbrev-ref HEAD)" != "$ref"; then git checkout "$ref"; fi)
      echo "  Saving component: $comp_dir"
      mkdir -p "$HUB_WORKDIR/$comp_dir"
      cp -rf "$temp_dir/$subdir/" "$HUB_WORKDIR/$comp_dir"
      continue
    fi

    gcp_repo=$(echo $components | componentSourceRepo "gcp" "$comp")
    if test -n "$gcp_repo"; then
      subdir=$(echo $components | componentSourceSubdir "gcp" "$comp")
      ref=$(echo $components | componentSourceRef "gcp" "$comp")
      temp_dir=$(temp_file)
      echo "  Retrieving from gcp source repository"
      echo "  Running: gcloud source repos clone "$gcp_repo""
      gcloud --no-user-output-enabled source repos clone "$gcp_repo" "$temp_dir"
      (cd "$temp_dir" && ["$(git rev-parse --abbrev-ref HEAD)" = "$ref"] || git checkout "$ref")
      echo "  Saving component: $comp_dir"
      mkdir -p "$HUB_WORKDIR/$comp_dir"
      cp -rf "$temp_dir/$subdir/" "$HUB_WORKDIR/$comp_dir"
      continue
    fi
  done
done
