#!/bin/sh -e
# shellcheck disable=SC2086

if test -z "$1"; then
  cat << EOF
Error: verb has not been specidfied: $(basename "$0") VERB

Currently supported verbs: deploy, undeploy
EOF
  exit 1;
fi

ident() {
  sed 's/^/  /'
}

if test -n "$DOMAIN_NAME"; then
    color w "Environment variable: DOMAIN_NAME has been deprecated"
    color w "Use HUB_DOMAIN_NAME instead"
    HUB_DOMAIN_NAME="$DOMAIN_NAME"
    export HUB_DOMAIN_NAME
fi

VERB="$1"
kubectl="kubectl"
yq="yq -M"
if test -n "$HUB_DOMAIN_NAME"; then
  kubectl="$kubectl --context=$HUB_DOMAIN_NAME"
fi
if test -n "$NAMESPACE"; then
  kubectl="$kubectl --namespace=$NAMESPACE"
fi

case "$VERB" in
  "deploy" )
    kubectl_cmd="$kubectl apply"
  ;;
  "undeploy" )
    kubectl_cmd="$kubectl delete --ignore-not-found=true"
  ;;
  * )
    echo "Error: unsupported verb: $VERB"
    exit 1
  ;;
esac

HUB_DOMAIN_NAME=${HUB_DOMAIN_NAME:?"Required variable HUB_DOMAIN_NAME has not been defined"}
# NAMESPACE=${NAMESPACE:?"Required variable DOMAIN_NAME has not been defined"}

apply_k8s_resources_file() {
    max_di=$(yq e 'di' "$1" | tail -1)
    for i in $(seq 0 "$max_di"); do
        kind=$(yq e "select(di == $i).kind | select(.) | downcase" "$1")
        name=$(yq e "select(di == $i).metadata.name | select(.)" "$1")
        if test -z "$name" -o -z "$kind"; then
            continue
        fi
        echo "  Checking $kind/$name"
        if $kubectl get "$kind" "$name" > /dev/null; then
            echo "  $name already exists"
        else
            echo "  (not an error) creating..."
            yq e "select(di == $i)" "$1" | $kubectl create -f -
        fi
    done
}

if test "$VERB" = "deploy"; then
  if test -n "$NAMESPACE"; then
    if ! $kubectl get namespace "$NAMESPACE" > /dev/null;  then
      $kubectl create namespace "$NAMESPACE"
    fi
  fi
  if test -n "$CRD"; then
      if echo "$CRD" | grep -e '^https\?://' >/dev/null 2>&1; then
          echo "* Downloading CRD from: $CRD ..."
          temp=$(temp_file)
          files download "$CRD" "$temp"
          apply_k8s_resources_file "$temp"
      elif test -f "$CRD"; then
          echo "* Reading CRD from: $CRD"
          apply_k8s_resources_file "$CRD"
      fi
  else
      color w "Warning: file not found ($CRD)"
  fi
  if test -d "crds"; then
      for file in crds/*.yaml crds/*.yml; do
          if test ! -f "$file"; then continue; fi
          echo "* Reading CRD from: $file"
          apply_k8s_resources_file "$file"
      done
  fi
fi

if test -n "$HUB_KUSTOMIZE_TARBALL_URL"; then
  echo "* Downloading component base from: $HUB_KUSTOMIZE_TARBALL_URL"
  files download-tar "$HUB_KUSTOMIZE_TARBALL_URL" "$(pwd)/kustomize" --tar-subpath "$HUB_KUSTOMIZE_TARBALL_SUBPATH"
fi

if test -x "pre-$VERB"; then
  echo "Running pre-$VERB hook..."
  "./pre-$VERB"
fi

if which kustomize > /dev/null; then
  echo "* Using kustomize"
  kustomize_build_cmd="kustomize build ."
elif which kubectl > /dev/null; then
  echo "* Using kubectl (kustomize found found)"
  kustomize_build_cmd="kubectl kustomize ."
else
  echo "Error: kustomize or kubectl has not been found!"
  exit 5
fi

WORKDIR="$(mktemp -d)"
trap 'rm -rf -- "$WORKDIR"' EXIT

echo "* Running kustomize build"
$kustomize_build_cmd > "$WORKDIR/resources.yaml"

if test -n "$(yq e '. | select(.kind == "Namespace")' "$WORKDIR/resources.yaml")"; then
  echo "* Removing shared resource Namespace from kustomize build"
  color g "  HINT: consider moving Namespace to pre-$VERB script"
  yq e '. | select(.kind == "Namespace")' "$WORKDIR/resources.yaml" > "$WORKDIR/namespaces.yaml"
  yq e '.metadata.name | "  - " + .' "$WORKDIR/namespaces.yaml" | color g
  yq e '. | select(.kind == "Namespace" | not)' -i "$WORKDIR/resources.yaml"
  if test "$VERB" = deploy; then
    echo "* Processing Namespaces before other kustomize resources:"
    apply_k8s_resources_file "$WORKDIR/namespaces.yaml"
  fi
fi

if test "$VERB" = deploy; then
  for name in $(yq e '.metadata.namespace | ""+select(.)' $WORKDIR/resources.yaml | uniq ); do
    printf '%s' "  Checking namespace $name... "
    if $kubectl get namespace "$name" > /dev/null; then
      echo "(already exists)"
    else
      echo "  (not an error) creating..."
      $kubectl create namespace "$name"
    fi
  done
fi

# Special case for CRD
if test -n "$(yq e '. | select(.kind == "CustomResourceDefinition")' "$WORKDIR/resources.yaml")"; then
  $yq e '. | select(.kind == "CustomResourceDefinition")' "$WORKDIR/resources.yaml" > "$WORKDIR/crds.yaml"
  if test "$VERB" = deploy; then
    echo "* Processing CRDs before other kustomize resources:"
    apply_k8s_resources_file "$WORKDIR/crds.yaml"
  fi

  echo "* Removing CustomResourceDefinition from kustomize build"
  yq e '. | select(.kind == "CustomResourceDefinition" | not)' -i "$WORKDIR/resources.yaml"
fi

echo "* Processing kustomize resources..."
$kubectl_cmd -f "$WORKDIR/resources.yaml"

if test -x post-$VERB; then
  echo "Running post-$VERB hook..."
  ./post-$VERB
fi
