#!/bin/sh -e
# Copyright (c) 2023 EPAM Systems, Inc.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.


usage() {
  cat << EOF
Deletes a hosted zone by domain name

Usage: $(basename "$0") --domain-name

Parameters:
    --domain-name         Domain name of the hosted zone
    --aws-region          AWS Region
    --aws-profile         AWS Profile
EOF
}

USE_FORCE="0"
while [ "$1" != "" ]; do
    case $1 in
        --aws-region )    shift
                          export AWS_REGION="$1"
                          ;;
        --aws-profile )   shift
                          export AWS_PROFILE="$1"
                          ;;
        --domain-name )   shift
                          domain_name="$1"
                          ;;
        -f |--force )     USE_FORCE="1"
                          ;;
        -h | --help )     usage
                          exit
                          ;;
    esac
    shift
done

if test -z "$domain_name"; then
  usage
  exit 1
fi

export AWS_DEFAULT_OUTPUT=text
temp="$(mktemp -d)"
trap 'rm -rf "$temp"' EXIT

hosted_zone_id() {
  aws route53 list-hosted-zones \
    --query 'HostedZones[?Name==`'$1'.`].Id' \
    | xargs | cut -d " " -f1
}

strip_dot() {
  echo "$1" | sed 's/\.$//'
}

domain_name="$(strip_dot "$domain_name")"
if test -z "$HUB_DOMAIN_NAME"; then
  HUB_DOMAIN_NAME="$domain_name"
fi

printf "* Checking Route53 hosted zone %s... " "$domain_name";
ZONE_ID=$(hosted_zone_id "$domain_name")

if test -z "$ZONE_ID"; then
  color w "not found"
  exit
fi
color h "$(basename "$ZONE_ID")"

# We check if current stack represented by HUB_DOMAIN_NAME
# actually owns the zone by checking the presence of a tag
tag_name="hubctl.io/stack/$HUB_DOMAIN_NAME"
printf "* Checking presence of a tag %s: " "$tag_name"

tag_value="$(
  aws route53 list-tags-for-resource \
    --resource-type hostedzone \
    --resource-id "$(basename "$ZONE_ID")" \
    --output=json | jq -r --arg tag "$tag_name" '.ResourceTagSet.Tags[]|select(.Key==$tag).Value|select(.)'
  )"
color h "${tag_value:-not found}"

if test "$tag_value" != "owned" -a "$USE_FORCE" = "0"; then
  color w <<END
* Not deleting Route53 zone $HUB_DOMAIN_NAME because it is not owned by this stack
  Please, delete it manually if you don't need it anymore.

  Note: Route 53 owned by this stack should have tag: $tag_name="owned"
END
  exit 0
fi

echo "* Proceeding with Route 53 clean up"

aws route53 list-resource-record-sets \
  --hosted-zone-id "$ZONE_ID" --output json > "$temp/records.json"

for i in $(seq 0 "$(jq -r '.ResourceRecordSets | length - 1' "$temp/records.json")"); do
  type=$(jq -r ".ResourceRecordSets[$i].Type" "$temp/records.json")
  if test "$type" != "NS" -a "$type" != "SOA"; then
    name=$(jq -r ".ResourceRecordSets[$i].Name" "$temp/records.json")
    cat << EOF > "$temp/change-$i.json"
{
  "Comment": "AWS cleanup executed by hubctl",
  "Changes": [{
    "Action": "DELETE",
    "ResourceRecordSet": $(jq -cr ".ResourceRecordSets[$i]" "$temp/records.json")
  }]
}
EOF

    printf '%s' "  - Deleting $type $name "
    CHANGE=$(aws route53 change-resource-record-sets \
      --hosted-zone-id "$(basename "$ZONE_ID")" \
      --change-batch "file://$temp/change-$i.json" \
      --output=json | jq -r '.ChangeInfo.Id')
    if test -n "$CHANGE"; then
      printf '(change %s)... ' "$(basename "$CHANGE")"
      sleep 3
      aws route53 wait resource-record-sets-changed --id "$CHANGE"
      RESULT=$(aws route53 get-change --id "$CHANGE" --output text --query 'ChangeInfo.Status')
      color g "$RESULT"
    else
      echo "already deleted"
    fi
  fi
done

printf "* Deleting hosted zone: %s " "$(basename "$ZONE_ID")"
CHANGE=$(aws route53 delete-hosted-zone \
  --id="$ZONE_ID" \
  --output=json | jq -r '.ChangeInfo.Id')

if test -n "$CHANGE"; then
  printf '(change %s)... ' "$(basename "$CHANGE")"
  sleep 3
  aws route53 wait resource-record-sets-changed --id "$CHANGE" --output json
  RESULT=$(aws route53 get-change --id "$CHANGE" --output text --query 'ChangeInfo.Status')
  color g "$RESULT"
else
  echo "already deleted"
fi
