#!/bin/bash -e
# shellcheck disable=SC2046,SC2086,SC2034

usage() {
  cat << EOF
Environment variables parameters:
  -f --file               Path to hub.yaml or parameter files (can repeat multiple times; default: hub.yaml params.yaml)
  --defaults              Do not ask for usecr input and accept default values instead
EOF
}

if test -n "$(which tty)" && tty -s || echo "$-" | grep 'i'; then
  INTERACTIVE=true
else
  INTERACTIVE=false
fi

while [ "$1" != "" ]; do
  case $1 in
    --defaults )
      INTERACTIVE=false
      ;;
    --output )
      shift
      DOT_ENV="$1"
      ;;
    -f | --file )
      shift
      HUB_FILES="$(echo "$HUB_FILES $1" | xargs)"
      ;;
    -h | --help )
      usage
      exit
      ;;
  esac
  shift
done

if test -z "$HUB_WORKDIR"; then
  FIRST_FILE="$(echo "$HUB_FILES" | awk '{print $1;}')"
  if test -f $FIRST_FILE; then
    HUB_WORKDIR="$(dirname "$FIRST_FILE")"
  else
    HUB_WORKDIR="$(pwd)"
  fi
  export HUB_WORKDIR
fi

HISTORY_FILE="$HUB_WORKDIR/.hub/env/.history"
mkdir -p "$(dirname "$HISTORY_FILE")"
touch "$HISTORY_FILE"
history="dotenv -f $HISTORY_FILE"

if test $VERBOSE = "true"; then
  set -x
fi

if test -z "$HUB_FILES"; then
  echo "Error: cannot find stack definition files"
  exit 1
fi

echo "Configuring environment variables"
ALL_ENVS=
for f in $HUB_FILES; do
  test -f "$f" || continue;
  envs=$(
    yq e $f -o=json | jq -cr \
      '.. | objects | with_entries(select(.key=="fromEnv")).fromEnv? | select(.!=null)'
  )
  ALL_ENVS="$ALL_ENVS $envs"
done

if test -z "$DOT_ENV"; then
  echo "Error: please run with option: $(dirname "0")/$(basename "0") --output FILE "
  exit 2
fi

getByEnvVar() {
  local f result
  for f in $HUB_FILES; do
    test -f $f || continue;
    result=$(
      yq e -o=json $f | jq -cr \
        "[ .. | objects | select(.fromEnv==\"$2\").$1 | select(.) ] | first | select(.)"
    )
    if test -n "$result"; then
      echo "$result"
      break
    fi
  done
  if test -z "$result"; then
    # default value
    echo "$3"
  fi
}

getParamNameByEnvVar() {
  local f result
  for f in $HUB_FILES; do
    test -f $f || continue;
    result=$(
      yq e "$f" -o=json \
        | jq -r \
          "[ \
            .parameters | walk(if type==\"object\" and .fromEnv and .fromEnv!=\"$1\"  then null else . end) \
            | walk(if type==\"object\" and .name then {(.name):.} else . end) \
            | path(..)|[.[]|tostring] | select(.[] | contains(\"fromEnv\")) \
            | [ .[] | select(.!=\"fromEnv\" and .!=\"parameters\") | tonumber? //. \
            | select(type==\"string\")] | join(\".\") \
          ] | first | select(.)"
    )
    if test -n "$result"; then
      echo "$result"
      break
    fi
  done
}

touch $DOT_ENV
for ENV in $(echo $ALL_ENVS | xargs -n 1 | sort -u); do
  VALUE=$(printenv "$ENV" || echo "")
  PARAM=$(getParamNameByEnvVar "$ENV")
  BRIEF=$(getByEnvVar "brief" "$ENV")
  EMPTY="$(getByEnvVar "empty" "$ENV")"
  if test -z "$VALUE"; then
    echo -n "* Parameter: "
    color h "$PARAM"
    if test -n "$BRIEF"; then
      echo "  $BRIEF"
    fi
    VAL_default=$(getByEnvVar "default" "$ENV" "")
    VAL_hubstate=$(hub show -q ".parameters.$PARAM" -- -rM 2>/dev/null || echo "")
    VAL_history=$($history get $ENV)
    VAL_random=$(uuidgen | tr '[:upper:]' '[:lower:]' | tr -d -)
    VAL_empty=""
    if test "$EMPTY" = "allow"; then
      HASHTAGS="hubstate default empty"
    else
      HASHTAGS="hubstate history default random"
    fi
    for t in $HASHTAGS; do
      val=$(eval echo "\$VAL_$t")
      if test -n "$val" || test "$t" = "empty"; then
        hashtag="$t"
        break;
      fi
    done

    if ! $INTERACTIVE; then
      VALUE="$val"
    elif test "$val" = "$(echo $val | cut -c1-31)"; then
      read -rp "  Enter value ($val #$hashtag): " VALUE
    else
      read -rp "  Enter value ($(echo $val | cut -c1-31)... #$hashtag): " VALUE
    fi
    if test -n "$VALUE"; then
      $history set "$ENV=\"$VALUE\""
    else
      VALUE="$val"
    fi
  else
    echo "* Parameter $PARAM: already configured"
    continue
  fi
  echo "$ENV=\"$VALUE\"" >> $DOT_ENV
  echo "  saved as $ENV to .env file"
done
