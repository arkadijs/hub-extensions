#!/bin/bash -e
# shellcheck disable=SC2090

usage() {
    cat <<EOF
GCP parameters:
  --gcp-project-id               GCP project ID (default to GOOGLE_PROJECT)
  --gcs-bucket-name              GCS bucket name (defaults to GOOGLE_PROJECT_superhub)
  --domain-name                  Domain name of the stack (we get one from bubble dns if not set)
EOF
}

ident() {
  sed 's/^/  /'
}

jq='jq -cM'
# shellcheck disable=SC2089
# curl='curl -isH "Metadata-Flavor: Google"'
dotenv="dotenv -f $DOT_ENV"

while [ "$1" != "" ]; do
    case $1 in
    --gcs-bucket-name)
        shift
        HUB_STATE_BUCKET="$1"
        ;;
    --gcp-project-id)
        shift
        GOOGLE_PROJECT="$1"
        ;;
    # --gcp-region)
    #     shift
    #     GOOGLE_REGION="$1"
    #     ;;
    # --gcp-zone)
    #     shift
    #     GOOGLE_ZONE="$1"
    #     ;;
    --domain-name)
        shift
        HUB_DOMAIN_NAME="$1"
        ;;
    esac
    shift
done

if test "$VERBOSE" = "true"; then
	set -x
fi

HUB_CLOUD_PROVIDER="gcp"
export HUB_CLOUD_PROVIDER

echo -n "Setting current GCP project to: "
color b "$GOOGLE_PROJECT"
echo "* $(gcloud config set project "$GOOGLE_PROJECT" -q 2>&1)"

# if $curl 'http://metadata.google.internal' >/dev/null 2>&1; then
#   echo "* The Hub CLI runs inside a Google Cloud environment"
#   if test -z "$GOOGLE_REGION"; then
#     GOOGLE_ZONE=$(basename "$($curl http://metadata.google.internal/computeMetadata/v1/instance/zone)")
#     GOOGLE_REGION="$(echo "$GOOGLE_ZONE" | cut -d- -f1-2)"
#   fi
# else
#   if test -z "$GOOGLE_REGION"; then
#     echo -n "* Getting default region from project: "
#     GOOGLE_REGION=$(gcloud config get-value "compute/region")
#     color b "$GOOGLE_REGION"
#   fi

#   if test -z "$GOOGLE_ZONE"; then
#     echo -n "* Getting default zone from project: "
#     GOOGLE_ZONE=$(gcloud config get-value "compute/zone")
#     color b "$GOOGLE_ZONE"
#   fi
# fi

echo "Configuring Bubble DNS"
echo -n "* Enabling API for dns.googleapis.com... "
gcloud services enable "dns.googleapis.com" && echo "done"

### Create DNS Zone
CURRENT_DIR=$(dirname "$0")
# shellcheck disable=SC1091
source "$CURRENT_DIR/../bubble-dns/include"
if test -z "$HUB_DOMAIN_NAME"; then
  configureBubbleDNS
fi
echo -n "* Cloud DNS Zone "
color -n b "$HUB_DOMAIN_NAME... "
FOUND=$(gcloud dns managed-zones list --filter=dnsName:"$HUB_DOMAIN_NAME" \
	--format json | $jq '. | length' | xargs)
if test "$FOUND" == "0"; then
	echo "not found"
  echo "  Creating (takes a minute)... "
  gcloud dns managed-zones create "$(echo "$HUB_DOMAIN_NAME" | cut -d. -f1)" \
		--description="Managed by Superhub" \
		--dns-name="$HUB_DOMAIN_NAME" 2>&1 | ident;
  # FIXME: bubble-dns/include should be implemented as CLI and available in bin directory
	updateBubbleDNS "$HUB_DOMAIN_NAME" "$HUB_DOMAIN_SECRET"
else
	echo "found"
fi

### State Bucket
if test -z "$HUB_STATE_BUCKET"; then
  HUB_STATE_BUCKET="superhub-$GOOGLE_PROJECT"
fi
echo -n "Configuring state storage: "
color b "gs://$HUB_STATE_BUCKET"
if gsutil -q ls -b "gs://$HUB_STATE_BUCKET" > /dev/null 2>&1; then
  echo "* Bucket gs://$HUB_STATE_BUCKET already exist in $GOOGLE_PROJECT"
else
  echo -n "* Creating bucket gs://$HUB_STATE_BUCKET... "
	if gsutil mb -c standard -b on "gs://$HUB_STATE_BUCKET" > /dev/null 2>&1; then
    gsutil label ch -l "managed-by":"superhub" "gs://$HUB_STATE_BUCKET" > /dev/null 2>&1
		echo "done"
	else
		color err "Error: Failed to create gs://$HUB_STATE_BUCKET bucket"
    exit 1
	fi
fi

HUB_STATE_FILE=".hub/$HUB_DOMAIN_NAME.state,gs://$HUB_STATE_BUCKET/$HUB_DOMAIN_NAME/hub/hub.state"
HUB_ELABORATE_FILE=".hub/$HUB_DOMAIN_NAME.elaborate,gs://$HUB_STATE_BUCKET/$HUB_DOMAIN_NAME/hub/hub.elaborate"

### State function
STATE_FUNCTION_REGION="us-central1"
STATE_FUNCTION_REPO="https://github.com/agilestacks/hub-utils.git"
STATE_FUNCTION_REF="master"
echo "Configuring state management cloud function "
if gcloud functions describe stacks --region "$STATE_FUNCTION_REGION" > /dev/null 2>&1 && test -z "$FORCE_FUNCTION_UPDATE"; then
  echo "* State management cloud function already deployed to $GOOGLE_PROJECT. Use --force flag to redeploy"
else
  echo -n "* Deploying the function to $GOOGLE_PROJECT (it could take up to 2 minutes). "
  TEMP_DIR=$(mktemp -d || exit 2)
  mkdir -p "$TEMP_DIR"
  trap 'rm -rf $TEMP_DIR' EXIT
  git clone --depth 1 "$STATE_FUNCTION_REPO" "$TEMP_DIR" > /dev/null 2>&1
  git -C "$TEMP_DIR" checkout "$STATE_FUNCTION_REF" > /dev/null 2>&1
  if RESULT=$(gcloud functions deploy stacks --runtime nodejs16 --trigger-http \
    --allow-unauthenticated --memory 4096MB \
    --source "$TEMP_DIR"/hub-state-api --entry-point stacks 2>&1); then
    echo "Deployed"
  else
    color err "Error occured, see the details below:"
    color err "$RESULT"
    exit 1
  fi
fi

# if test -n "$GOOGLE_REGION"; then
#   echo -n "* Setting region: "
#   color b "$GOOGLE_REGION"
#   $dotenv set "GOOGLE_REGION=\"$GOOGLE_REGION\""
# fi

# if test -n "$GOOGLE_ZONE"; then
#   echo -n "* Setting zone: "
#   color b "$GOOGLE_ZONE"
#   $dotenv set "GOOGLE_ZONE=\"$GOOGLE_ZONE\""
# fi

$dotenv set "HUB_CLOUD_PROVIDER=\"$HUB_CLOUD_PROVIDER\""
$dotenv set "HUB_STATE_BUCKET=\"$HUB_STATE_BUCKET\""
# TODO: STATE_BUCKET is deprecated and will be removed in favour of HUB_STATE_BUCKET
$dotenv set "STATE_BUCKET=\"$HUB_STATE_BUCKET\""
$dotenv set "GOOGLE_PROJECT=\"$GOOGLE_PROJECT\""
# deprecated variable as not recognized by Terraform
# see: https://registry.terraform.io/providers/hashicorp/google/3.29.0/docs/guides/provider_reference
$dotenv set "GCP_PROJECT_ID=\"$GOOGLE_PROJECT\""
$dotenv set "HUB_DOMAIN_NAME=\"$HUB_DOMAIN_NAME\""
$dotenv set "HUB_STATE=\"$HUB_STATE_FILE\""
$dotenv set "HUB_ELABORATE=\"$HUB_ELABORATE_FILE\""
