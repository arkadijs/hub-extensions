#!/bin/bash -e
 # shellcheck disable=SC2086

HUB_HOME="${HUB_HOME:-$(dirname "$0")}"
HUB_WORKDIR="${HUB_WORKDIR:-$(pwd)}"
HUB_EXTENSION="$(basename "$0" | sed 's/-/ /g')"
HUB_MANUAL_ELABORATE="${HUB_MANUAL_ELABORATE:-"1"}"
PATH="$HUB_HOME:$HUB_HOME/bin:$HUB_WORKDIR:$HUB_WORKDIR/bin:$PATH"
export PATH HUB_WORKDIR
DOT_ENV="$(files abspath .env)"
export DOT_ENV

verb=deploy/undeploy

usage() {
cat << EOF

${verb} the stack

Usage:
$ $HUB_EXTENSION
${verb}s entire stack

$ $HUB_EXTENSION -c component1,component2
${verb}s two components

$ $HUB_EXTENSION -c component1,component2 --profile pod
${verb}s two components and executes deployment in a pod

Parameters:
    -c --component        Components to ${verb}
    -o --offset           Start with the given component
    -l --limit            Component to stop ${verb} at
    --profile             Deployment profile, one of: local, toolbox, pod
    -V  --verbose         Verbose outputs for debug purpose
    --tty                 Use TTY (terminal) mode for hub ${verb}
    --no-tty              Do not use TTY (terminal) mode for hub ${verb}
    --                    Separator to define "hub ${verb}" low level parameters (see: "hub ${verb} --help")
    -h  --help            Print this message

EOF
}

maybe_verb=$(basename "$0" | cut -d- -f3)
if test -z "$maybe_verb"; then
  usage
  exit 1
fi
verb="$maybe_verb"

eval "$(dotenv -f $HUB_WORKDIR/.env "export")"

FULL_STACK=true
WORKDIR=$(pwd)
HUB_OPTS=

while test "$1" != ""; do
    case $1 in
        -c | --component )  shift
                            HUB_OPTS="$HUB_OPTS -c $1"
                            FULL_STACK=false
                            ;;
        -o | --offset )     shift
                            HUB_OPTS="$HUB_OPTS -o $1"
                            FULL_STACK=false
                            ;;
        -l | --limit )      shift
                            HUB_OPTS="$HUB_OPTS -l $1"
                            FULL_STACK=false
                            ;;
        --tty )             HUB_OPTS="$HUB_OPTS --tty true"
                            ;;
        --no-tty )          HUB_OPTS="$HUB_OPTS --tty false"
                            ;;
        --profile )         shift
                            export HUB_DEPLOY_PROFILE="$1"
                            ;;
        -V | --verbose )    set -x
                            ;;
        -h | --help )       usage
                            exit
                            ;;
        -- )                shift
                            HUB_OPTS="$HUB_OPTS $*"
                            break
                            ;;
        * )                 usage
                            exit 1
    esac
    shift
done

if test ! -f .env; then
cat << EOF
Stack configuration (.env)

To resolve please run:
  $ hub configure -f hub.yaml

To explore more configuration options:
  $ hub configure -f hub.yaml --help

EOF
  exit 1
fi

if test -z "$HUB_FILES"; then
  cat << EOF
Error: cannot find hub definition files (HUB_FILES) in .env"

Probably because stack has not been initialized for deployment yet!

Example:
  $ hub stack init -f hub.yaml

To explore more configuration options:
  $ hub stack init -f hub.yaml --help

EOF

  exit 2
fi

if test -z "$HUB_DOMAIN_NAME"; then
cat << EOF
Error: cannot find hub definition files (HUB_DOMAIN_NAME) in .env"

Probably because stack has not been configured for deployment yet!

Example:
  $ hub stack configure

To explore more configuration options:
  $ hub stack configure --help

EOF

  exit 2
fi

cat << EOF
Starting ${verb}:
* Using domain name: $HUB_DOMAIN_NAME
EOF

if test -n "$HUB_KUBECONFIG" -a -f "$HUB_KUBECONFIG"; then
  KUBECONFIG="$HUB_KUBECONFIG"
  export KUBECONFIG
  echo "* Using kubeconfig: $KUBECONFIG"
elif test -n "$KUBECONFIG" -a -f "$KUBECONFIG"; then
  export KUBECONFIG
  echo "* Using kubeconfig: $KUBECONFIG"
fi

HUB=${HUB:-hub}

if test -z "$HUB_STATE"; then
  HUB_STATE=".hub/$HUB_DOMAIN_NAME.state"
fi
echo "* Using hub state:"
for i in ${HUB_STATE//,/ }; do
  echo "  - $i"
done

if test -z "$HUB_ELABORATE"; then
  HUB_ELABORATE=".hub/$HUB_DOMAIN_NAME.elaborate"
fi
echo "* Using hub elaborate:"
for i in ${HUB_ELABORATE//,/ }; do
  echo "  - $i"
  if ! grep :// <<<$i >/dev/null; then
    HUB_ELABORATE_FILE=$i
  fi
done

if test -n "$HUB_CLOUD_PROVIDER"; then
  echo "* Using cloud: $HUB_CLOUD_PROVIDER"
  HUB_OPTS="--clouds=$HUB_CLOUD_PROVIDER $HUB_OPTS"
fi

if $FULL_STACK || test -n "$HUB_ELABORATE_FILE" -a ! -e "$HUB_ELABORATE_FILE"; then
  hub-stack-elaborate
elif test -n "$HUB_ELABORATE_FILE"; then
  if ! check-elaborate "$HUB_ELABORATE_FILE" "$HUB_FILES"; then
    if test -z "$HUB_MANUAL_ELABORATE"; then
      echo    "Run this command:"
      color h "    hub stack elaborate"
      echo    "or update elaborate file timestamp:"
      echo    "    touch $HUB_ELABORATE_FILE"
      echo
      exit 1
    fi
    hub-stack-elaborate
  fi
fi

export HUB_YAML HUB_FILES HUB_STATE HUB_ELABORATE

BEFORE=$(yq -N e .extensions.${verb}.before.[] $HUB_FILES | sort | uniq)
for i in $(echo "$BEFORE" | xargs -n1); do
  hook=$(files find-in-path "$i/before-${verb}");
  if test -z "$hook"; then
    color warn "  Warning! cannot find before hook: $i"
  fi
  echo -n "  Running before ${verb} hook: "
  color bold "$i"
  $hook
done

lifecycle=$(files find-in-path "profiles/$HUB_DEPLOY_PROFILE/${verb}");
if test -z "$lifecycle"; then
 cat << EOF
Cannot find deployment profile: $HUB_DEPLOY_PROFILE

Completed with errors!
EOF
  exit 5
fi

cat << EOF

Proceeding with: ${verb}
* Using profile: $HUB_DEPLOY_PROFILE
* Running CLI command:

  $ hub ${verb} $HUB_ELABORATE -s $HUB_STATE $HUB_OPTS

EOF

# shellcheck disable=SC2086
$lifecycle "$HUB_ELABORATE" -s "$HUB_STATE" $HUB_OPTS
echo

AFTER=$(yq -N e .extensions.${verb}.after.[] $HUB_FILES | sort | uniq)
for i in $(echo "$AFTER" | xargs -n1); do
  hook=$(files find-in-path "$i/after-${verb}");
  if test -z "$hook"; then
    color warn "  Warning! cannot find after hook: $i"
  fi
  echo -n "  Running after ${verb} hook:"
  color h "$i"
  $hook
done

echo "Done!"
